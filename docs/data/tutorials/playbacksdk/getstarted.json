{
    "sections": [
      {
        "chapter": "Getting Started",
        "estimatedTimeInMinutes": 60,
        "title": "Playback SDK Overview",
        "content": [
          {
            "inlineContent": [
              {
                "type": "text",
                "text": "Playback SDK simplifies integrating video playback functionalities into OTT applications. It provides a unified interface for interacting with video APIs and managing playback logic."
              }
            ],
            "type": "paragraph"
          },
          {
            "inlineContent": [
              {
                "inlineContent": [
                  {
                    "type": "text",
                    "text": "Key Features:"
                  }
                ],
                "type": "strong"
              }
            ],
            "type": "paragraph"
          },
          {
            "items": [
              {
                "content": [
                  {
                    "type": "paragraph",
                    "inlineContent": [
                      {
                        "type": "strong",
                        "inlineContent": [
                          {
                            "type": "text",
                            "text": "Abstraction:"
                          }
                        ]
                      },
                      {
                        "text": " Hides the complexities of underlying video APIs, allowing you to focus on the core playback experience.",
                        "type": "text"
                      }
                    ]
                  }
                ]
              },
              {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "inlineContent": [
                          {
                            "text": "Flexibility:",
                            "type": "text"
                          }
                        ],
                        "type": "strong"
                      },
                      {
                        "type": "text",
                        "text": " Supports different video providers and allows the creation of custom playback plugins for extended functionalities."
                      }
                    ],
                    "type": "paragraph"
                  }
                ]
              },
              {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "type": "strong",
                        "inlineContent": [
                          {
                            "type": "text",
                            "text": "Error Handling:"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " Provides mechanisms to handle potential issues during playback and notify your application."
                      }
                    ],
                    "type": "paragraph"
                  }
                ]
              }
            ],
            "type": "unorderedList"
          }
        ],
        "kind": "hero"
      },
      {
        "tasks": [
          {
            "title": "Playback SDK",
            "stepsSection": [
                {
                    "content": [
                        {
                            "type": "paragraph",
                            "inlineContent": [
                              {
                                "type": "strong",
                                "inlineContent": [
                                  {
                                    "text": "  ",
                                    "type": "text"
                                  }
                                ]
                              },
                              {
                                "type": "text",
                                "text": " Add SDK to your Gradle file"
                              },
                              {
                                "type": "text",
                                "text": " "
                              },
                              {
                                "inlineContent": [
                                  {
                                    "text": "Ensure that the plugin setup and registration occur during the app's initialization process.",
                                    "type": "text"
                                  }
                                ],
                                "type": "strong"
                              }
                            ]
                          }
                    ],
                    "caption": [],
                    "type": "step",
                    "media": null,
                    "code": "build.gradle.kts",
                    "runtimePreview": null
                },
              {
                "content": [
                  {
                    "type": "paragraph",
                    "inlineContent": [
                      {
                        "type": "strong",
                        "inlineContent": [
                          {
                            "text": " ",
                            "type": "text"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": "Create an instance of the custom video player plugin and configure it by setting playback options such as autoplay, background playback, and fullscreen settings. Begin by creating a VideoPlayerConfig object, then update its autoplay, background playback, and fullscreen settings, including enabling fullscreen on screen rotation (fullscreenRotationEnabled) and activating the fullscreen button (fullscreenEnabled). Finally, pass this configuration object to the plugin."
                      },
                      {
                        "type": "text",
                        "text": " "
                      },
                      {
                        "inlineContent": [
                          {
                            "text": "Ensure that the plugin setup and registration occur during the app's initialization process.",
                            "type": "text"
                          }
                        ],
                        "type": "strong"
                      }
                    ]
                  }
                ],
                "caption": [],
                "type": "step",
                "media": null,
                "code": "PlayBackDemoApp.kt",
                "runtimePreview": null
              },
              {
                "content": [
                  {
                    "type": "paragraph",
                    "inlineContent": [
                      {
                        "type": "strong",
                        "inlineContent": [
                          {
                            "type": "text",
                            "text": "  "
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": ""
                      },
                      {
                        "text": " ",
                        "type": "text"
                      },
                      {
                        "type": "text",
                        "text": "Add custom user-agent header."
                      }
                    ]
                  }
                ],
                "type": "step",
                "media": null,
                "code": "PlayBackDemoAppWithUserAgent.kt",
                "runtimePreview": null,
                "caption": [
                  {
                    "type": "paragraph",
                    "inlineContent": [
                      {
                        "type": "strong",
                        "inlineContent": [
                          {
                            "text": " ",
                            "type": "text"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " This step is only required for content that needs a token, when using OkHttp or other 3rd party frameworks that overwrite the standard user-agent header with their own.\nIf the content requires starting a CloudPay session, it’s important that the request to start the session has the same user-agent header as the video loading requests from the player. This can be achieved either by disabling the overwriting behaviour in the 3rd party networking framework you’re using, or by passing a userAgent parameter to the initialize method, like in this example with OkHttp."
                      }
                    ]
                  }
                ]
              },
              {
                "content": [
                  {
                    "type": "paragraph",
                    "inlineContent": [
                      {
                        "type": "strong",
                        "inlineContent": [
                          {
                            "type": "text",
                            "text": "  "
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": ""
                      },
                      {
                        "text": " ",
                        "type": "text"
                      },
                      {
                        "type": "text",
                        "text": "Load the player using the Playback SDK and handle any playback errors."
                      }
                    ]
                  }
                ],
                "type": "step",
                "media": null,
                "code": "PlayerTestView.kt",
                "runtimePreview": null,
                "caption": [
                  {
                    "type": "paragraph",
                    "inlineContent": [
                      {
                        "type": "text",
                        "text": "In this step, the code utilizes the "
                      },
                      {
                        "type": "strong",
                        "inlineContent": [
                          {
                            "text": "loadPlayer",
                            "type": "text"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " function provided by the Playback SDK to initialize and load the video player. The function takes three parameters: the entry ID, viewer ID, and authorization token. The viewer ID is the unique ID from CloudPay (CustomerID). It will not be present for free videos, as there is no session for those users. If the viewer ID is null, analytics tracking will be disabled. Additionally, it includes a closure to handle any potential playback errors that may occur during the loading process."
                      },
                      {
                        "type": "text",
                        "text": " "
                      },
                      {
                        "type": "text",
                        "text": "The "
                      },  
                      {
                        "type": "strong",
                        "inlineContent": [
                          {
                            "type": "text",
                            "text": "handlePlaybackError"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " function is called within the closure to handle the playback errors. It switches on the type of error received and provides appropriate error handling based on the type of error encountered."
                      },
                      {
                        "type": "text",
                        "text": " "
                      },
                      {
                        "type": "text",
                        "text": "The code also includes a placeholder comment to indicate where the removal of the player could be implemented in the "
                      },
                      {
                        "type": "strong",
                        "inlineContent": [
                          {
                            "type": "text",
                            "text": "onDestroy"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": " modifier."
                      },
                      {
                        "type": "paragraph",
                        "inlineContent": [
                          {
                            "type": "text",
                            "text": "If you want to allow users to access free content or if you're implementing a guest mode, you can pass an empty string or "
                          },
                          {
                            "type": "strong",
                            "inlineContent": [
                              {
                                "type": "text",
                                "text": "null"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "text": " value as the "
                          },
                          {
                            "type": "strong",
                            "inlineContent": [
                              {
                                "type": "text",
                                "text": "authorizationToken"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "text": " when calling the "
                          },                                            
                          {
                            "type": "strong",
                            "inlineContent": [
                              {
                                "type": "text",
                                "text": "loadPlayer"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "text": " function. In case you have a logged-in user and want to track Bitmovin analytics for the current session, you need to pass the user's ID in the analyticsViewerId parameter. This will bypass the need for authentication, enabling unrestricted access to the specified content."
                          }
                        ]                        
                      }
                    ]
                  }
                ]
              }
            ],
            "anchor": "PlayBack-SDK",
            "contentSection": [
              {
                "content": [
                  {
                    "inlineContent": [
                      {
                        "type": "strong",
                        "inlineContent": [
                          {
                            "text": "Explore how to use StreamAMG Playback SDK.",
                            "type": "text"
                          }
                        ]
                      }
                    ],
                    "type": "paragraph"
                  }
                ],
                "kind": "fullWidth"
              }
            ]
          }
        ],
        "kind": "tasks"
      }
    ],
    "hierarchy": {
      "reference": "doc://PlaybackSDK/tutorials/Table-Of-Contents",
      "modules": [
        {
          "reference": "doc://PlaybackSDK/tutorials/Table-Of-Contents/Getting-Started",
          "projects": [
            {
              "reference": "doc://PlaybackSDK/tutorials/PlaybackSDK/GetStarted",
              "sections": [
                {
                  "kind": "task",
                  "reference": "doc://PlaybackSDK/tutorials/PlaybackSDK/GetStarted#PlayBack-SDK"
                }
              ]
            }
          ]
        }
      ],
      "paths": [
        [
          "doc://PlaybackSDK/tutorials/Table-Of-Contents",
          "doc://PlaybackSDK/tutorials/Table-Of-Contents/$volume",
          "doc://PlaybackSDK/tutorials/Table-Of-Contents/Getting-Started"
        ]
      ]
    },
    "kind": "project",
    "metadata": {
      "title": "Playback SDK Overview",
      "category": "PlaybackSDK Tutorial",
      "categoryPathComponent": "Table-Of-Contents",
      "role": "project"
    },
    "schemaVersion": {
      "major": 0,
      "minor": 3,
      "patch": 0
    },
    "variants": [
      {
        "traits": [
          {
            "interfaceLanguage": "kotlin"
          }
        ],
        "paths": [
          "/tutorials/playbacksdk/getstarted"
        ]
      }
    ],
    "identifier": {
      "interfaceLanguage": "kotlin",
      "url": "doc://PlaybackSDK/tutorials/PlaybackSDK/GetStarted"
    },
    "references": {
      "PlayerTestView.kt": {
        "identifier": "PlayerTestView.kt",
        "highlights": [
          {
            "line": 84
          },
          {
            "line": 86
          }
        ],
        "content": [
            "// Others imports",
            "import com.streamamg.PlaybackAPIError",
            "import com.streamamg.PlaybackSDKManager",
            "import com.streamamg.PlaybackSDKManager.loadPlayer",
            "import com.streamamg.playback_demo_android.data.SettingsManager",
            "import com.streamamg.playback_demo_android.ui.theme.PlaybackdemoandroidTheme",
            "import com.streamamg.player.plugin.VideoPlayerPluginManager",
            "import com.streamamg.player.plugin.bitmovin.BitmovinVideoPlayerPlugin",
            "",
            "",
            "    override fun onCreate(savedInstanceState: Bundle?) {",
            "        super.onCreate(savedInstanceState)",
            "",
            "        val apiKey = \"API_KEY\"",
            "        val customUserAgent = \"okhttp/${okhttp3.OkHttp.VERSION}\"",
            "",
            "        PlaybackSDKManager.updateCastContext(this)",
            "",
            "        // Initialize SDK with the settings",
            "        PlaybackSDKManager.initialize(apiKey, userAgent = userAgentHeader) { license, error ->",
            "",
            "            error?.let {",
            "                Log.e(this::class.simpleName, it.toString())",
            "            }",
            "",
            "            val customPlugin = BitmovinVideoPlayerPlugin()",
            "            // Enable background playback",
            "            val playerConfig = VideoPlayerConfig()",
            "            playerConfig.playbackConfig.autoplayEnabled = true",
            "            playerConfig.playbackConfig.backgroundPlaybackEnabled = true",
            "            playerConfig.playbackConfig.fullscreenRotationEnabled = true",
            "            playerConfig.playbackConfig.fullscreenEnabled = true",
            "            // Inject the player config to the plugin",
            "            customPlugin.setup(playerConfig)",
            "",
            "            VideoPlayerPluginManager.registerPlugin(customPlugin)",
            "        }",
            "",
            "        setContent {",
            "            val navController = rememberNavController()",
            "            PlaybackDemoAndroidTheme {",
            "                Surface(",
            "                    modifier = Modifier.fillMaxSize(),",
            "                    color = Color.White",
            "                ) {",
            "                    // Custom view to show player UI",
            "                    PlayerContent(entryId = \"ENTRY ID\",",
            "                                 authorizationToken = \"AUTH TOKEN or null or empty string\",", 
            "                                 analyticsViewerId=\"loggedin user id or empty string\")",
            "                }",
            "            }",
            "        }",
            "    }",
            "}",
            "",
            "@Composable",
            "fun PlayerContent(entryId: String, authorizationToken: String) {",

            "    val context = LocalContext.current",
            "    PlaybackSDKManager.updateCastContext(context)",

            "    if (authorizationToken.isEmpty()) {",
            "        LaunchedEffect(Unit) {",
            "            playerLoaded = true",
            "        }",
            "    } else {",
            "        // Need to start the SSO before using the playback API",
            "        LaunchedEffect(Unit) {",
            "            val response = makeAPICall(\"${BASE_URL}/sso/start?token=$authorizationToken\")",
            "            when (response) {",
            "                is ApiResponse.Success -> {",
            "                    playerLoaded = true",
            "                }",
            "                is ApiResponse.Error -> {",
            "                    Log.e(\"PlayerActivity\", \"API call failed with error: ${response.errorMessage}\")",
            "                    playerLoaded = true // Loading anyway the player so we can test the error codes",
            "                }",
            "            }",
            "        }",

            "        if (playerLoaded) {",
            "            Box(",
            "                modifier = Modifier.fillMaxSize()",
            "            ) {",
            "                Box(",
            "                    modifier = Modifier",
            "                        .fillMaxWidth()",
            "                        .aspectRatio(16f / 9f)",
            "                        .align(Alignment.TopCenter)",
            "                ) {",
            "                    val viewerId = \"viewer id\"",
            " ",
            "                    PlaybackSDKManager.loadPlayer(entryId, viewerId, authorizationToken) { error ->",
            "                        Log.e(\"PlayerActivity\", error.message.toString())",
            "                        when (error) {",
            "                            is PlaybackAPIError.ApiError -> {",
            "                                Log.e(",
            "                                    \"PlayerActivity\",",
            "                                    \"API Error: Code ${error.statusCode}, Message: ${error.message}, Reason: ${error.reason}\"",
            "                                )",
            "                                errorMessage =",
            "                                    \"API Error: Code ${error.statusCode}, Message: ${error.message}, Reason: ${error.reason}\"",
            "                            }",
            "                            is PlaybackAPIError.NetworkError -> {",
            "                                errorMessage = \"Network issue: ${error.error.localizedMessage}\"",
            "                            }",
            "                            is PlaybackAPIError.InitializationError -> {",
            "                                errorMessage = \"Initialization failed.\"",
            "                            }",
            "                            else -> {",
            "                                errorMessage = \"An unknown error occurred.\"",
            "                            }",
            "                        }",
            "                    }",
            "                    errorMessage?.let {",
            "                        if (it.isNotEmpty()) {",
            "                            Text(",
            "                                text = it,",
            "                                color = Color.Red,",
            "                                modifier = Modifier.align(Alignment.BottomCenter)",
            "                            )",
            "                        }",
            "                    }",
            "                }",
            "            }",
            "        }",
            "    }",
            "}"
        ],
        "syntax": "swift",
        "fileType": "kotlin",
        "fileName": "PlayerTestView.kt",
        "type": "file"
      },
      "build.gradle.kts": {
        "identifier": "build.gradle.kts",
        "highlights": [],
        "fileType": "kotlin",
        "type": "file",
        "syntax": "java",
        "fileName": null,
        "content": [    
            "dependencies {",
            "   implementation 'com.github.StreamAMG:playback-sdk-android:x.y.z'",
            "}"
        ]
      },
      "PlayBackDemoApp.kt": {
        "identifier": "PlayBackDemoApp.kt",
        "highlights": [],
        "fileType": "kotlin",
        "type": "file",
        "syntax": "swift",
        "fileName": "PlayBackDemoApp.kt",
        "content": [
            "// Others imports",
            "",
            "import com.streamamg.PlaybackAPIError",
            "import com.streamamg.PlaybackSDKManager",
            "import com.streamamg.PlaybackSDKManager.loadPlayer",
            "import com.streamamg.playback_demo_android.data.SettingsManager",
            "import com.streamamg.playback_demo_android.ui.theme.PlaybackdemoandroidTheme",
            "import com.streamamg.player.plugin.VideoPlayerPluginManager",
            "import com.streamamg.player.plugin.bitmovin.BitmovinVideoPlayerPlugin",
            "",
            "class PlayerViewActivity : ComponentActivity() {",
            "",
            "    override fun onCreate(savedInstanceState: Bundle?) {",
            "        super.onCreate(savedInstanceState)",
            "",
            "        val apiKey = \"API_KEY\"",
            "",
            "        PlaybackSDKManager.updateCastContext(this)",
            "",
            "        // Initialize SDK with the settings",
            "        PlaybackSDKManager.initialize(apiKey) { license, error ->",
            "",
            "            error?.let {",
            "                Log.e(this::class.simpleName, it.toString())",
            "            }",
            "",
            "            val customPlugin = BitmovinVideoPlayerPlugin()",
            "            // Enable background playback",
            "            val playerConfig = VideoPlayerConfig()",
            "            playerConfig.playbackConfig.autoplayEnabled = true",
            "            playerConfig.playbackConfig.backgroundPlaybackEnabled = true",
            "            playerConfig.playbackConfig.fullscreenRotationEnabled = true",
            "            playerConfig.playbackConfig.fullscreenEnabled = true",
            "            // Inject the player config to the plugin",
            "            customPlugin.setup(playerConfig)",
            "",
            "            VideoPlayerPluginManager.registerPlugin(customPlugin)",
            "        }",
            "",
            "        setContent {",
            "            val navController = rememberNavController()",
            "            PlaybackDemoAndroidTheme {",
            "                Surface(",
            "                    modifier = Modifier.fillMaxSize(),",
            "                    color = Color.White",
            "                ) {",
            "                    // Custom view to show player UI",
            "                    PlayerContent(entryId = \"ENTRY ID\",",
            "                                 authorizationToken = \"AUTH TOKEN or null or empty string\",", 
            "                                 analyticsViewerId=\"loggedin user id or empty string\")",
            "                }",
            "            }",
            "        }",
            "    }",
            "}",
            "",
            "",
            "@Composable",
            "fun PlayerContent(entryId: String, authorizationToken: String) {",
            "   // Yours UI for the screen ",
            "}"
        ]
      },
      "PlayBackDemoAppWithUserAgent.kt": {
          "syntax": "swift",
          "fileName": "PlayBackDemoAppWithUserAgent.kt",
          "highlights": [
              {
                  "line": 16
              },
              {
                  "line": 17
              },
              {
                  "line": 22
              },
              {
                  "line": 23
              },
              {
                  "line": 24
              },
              {
                  "line": 25
              }
          ],
          "identifier": "PlayBackDemoAppWithUserAgent.kt",
          "fileType": "kotlin",
          "type": "file",
          "content": [
            "// Others imports",
            "",
            "import com.streamamg.PlaybackAPIError",
            "import com.streamamg.PlaybackSDKManager",
            "import com.streamamg.PlaybackSDKManager.loadPlayer",
            "import com.streamamg.playback_demo_android.data.SettingsManager",
            "import com.streamamg.playback_demo_android.ui.theme.PlaybackdemoandroidTheme",
            "import com.streamamg.player.plugin.VideoPlayerPluginManager",
            "import com.streamamg.player.plugin.bitmovin.BitmovinVideoPlayerPlugin",
            "",
            "",
            "    override fun onCreate(savedInstanceState: Bundle?) {",
            "        super.onCreate(savedInstanceState)",
            "",
            "        val apiKey = \"API_KEY\"",
            "        // Should match the user agent of the HTTP client used in the app",
            "        val customUserAgent = \"okhttp/${okhttp3.OkHttp.VERSION}\"",
            "",
            "        PlaybackSDKManager.updateCastContext(this)",
            "",
            "        // Initialize SDK with the settings",
            "        PlaybackSDKManager.initialize(",
            "             apiKey = apiKey,",
            "             userAgent = userAgentHeader",
            "        ) { license, error ->",
            "",
            "            error?.let {",
            "                Log.e(this::class.simpleName, it.toString())",
            "            }",
            "",
            "            val customPlugin = BitmovinVideoPlayerPlugin()",
            "            // Enable background playback",
            "            val playerConfig = VideoPlayerConfig()",
            "            playerConfig.playbackConfig.autoplayEnabled = true",
            "            playerConfig.playbackConfig.backgroundPlaybackEnabled = true",
            "            playerConfig.playbackConfig.fullscreenRotationEnabled = true",
            "            playerConfig.playbackConfig.fullscreenEnabled = true",
            "            // Inject the player config to the plugin",
            "            customPlugin.setup(playerConfig)",
            "",
            "            VideoPlayerPluginManager.registerPlugin(customPlugin)",
            "        }",
            "",
            "        setContent {",
            "            val navController = rememberNavController()",
            "            PlaybackDemoAndroidTheme {",
            "                Surface(",
            "                    modifier = Modifier.fillMaxSize(),",
            "                    color = Color.White",
            "                ) {",
            "                    // Custom view to show player UI",
            "                    PlayerContent(entryId = \"ENTRY ID\",",
            "                                 authorizationToken = \"AUTH TOKEN or null or empty string\",", 
            "                                 analyticsViewerId=\"loggedin user id or empty string\")",
            "                }",
            "            }",
            "        }",
            "    }",
            "}",
            "",
            "@Composable",
            "fun PlayerContent(entryId: String, authorizationToken: String) {",
            "   // Yours UI for the screen ",           
            "}"
          ]
      },
      "doc://PlaybackSDK/tutorials/Table-Of-Contents/Getting-Started": {
        "title": "Getting Started",
        "identifier": "doc://PlaybackSDK/tutorials/Table-Of-Contents/Getting-Started",
        "role": "article",
        "url": "/tutorials/table-of-contents/getting-started",
        "abstract": [],
        "kind": "article",
        "type": "topic"
      },
      "doc://PlaybackSDK/tutorials/PlaybackSDK/GetStarted": {
        "title": "Playback SDK Overview",
        "abstract": [
          {
            "text": "Playback SDK simplifies integrating video playback functionalities into OTT applications. It provides a unified interface for interacting with video APIs and managing playback logic.",
            "type": "text"
          }
        ],
        "identifier": "doc://PlaybackSDK/tutorials/PlaybackSDK/GetStarted",
        "url": "/tutorials/playbacksdk/getstarted",
        "kind": "project",
        "role": "project",
        "estimatedTime": "30min",
        "type": "topic"
      },
      "doc://PlaybackSDK/tutorials/PlaybackSDK/GetStarted#PlayBack-SDK": {
        "title": "Playback SDK",
        "role": "pseudoSymbol",
        "type": "section",
        "url": "/tutorials/playbacksdk/getstarted#PlayBack-SDK",
        "kind": "section",
        "identifier": "doc://PlaybackSDK/tutorials/PlaybackSDK/GetStarted#PlayBack-SDK",
        "abstract": [
          {
            "text": "Playback SDK simplifies integrating video playback functionalities into OTT applications. It provides a unified interface for interacting with video APIs and managing playback logic.",
            "type": "text"
          }
        ]
      },
      "doc://PlaybackSDK/tutorials/Table-Of-Contents": {
        "identifier": "doc://PlaybackSDK/tutorials/Table-Of-Contents",
        "kind": "overview",
        "role": "overview",
        "abstract": [
          {
            "text": "Welcome to the PlaybackSDK tutorial! In this tutorial, you will learn how to integrate and use the PlaybackSDK in your Android applications.",
            "type": "text"
          }
        ],
        "url": "/tutorials/table-of-contents",
        "title": "Introduction to PlaybackSDK",
        "type": "topic"
      }
    }
  }